============================= test session starts ==============================
platform darwin -- Python 3.10.2, pytest-7.1.1, pluggy-1.0.0 -- /Users/adrien/Projet_OC/Python_Testing/env/bin/python3
cachedir: .pytest_cache
rootdir: /Users/adrien/Projet_OC/Python_Testing
plugins: mock-3.7.0, cov-3.0.0
collecting ... collected 7 items

tests/functional_tests/test_functional_chrome.py::test_user_experience_chrome FAILED [ 14%]
tests/functional_tests/test_functional_firefox.py::test_user_experience_firefox FAILED [ 28%]
tests/unit_tests/test_load.py::test_should_load_clubs PASSED             [ 42%]
tests/unit_tests/test_load.py::test_should_load_competitions PASSED      [ 57%]
tests/unit_tests/test_route.py::TestPurchasePlaces::test_purchase_places_should_reduce_club_points_success PASSED [ 71%]
tests/unit_tests/test_route.py::TestPurchasePlaces::test_purchase_places_should_reduce_competition_points_success PASSED [ 85%]
tests/unit_tests/test_route.py::TestPurchasePlaces::test_get_purchase_should_fail PASSED [100%]

=================================== FAILURES ===================================
_________________________ test_user_experience_chrome __________________________

mock_modified_competitions_date = None

    def test_user_experience_chrome(mock_modified_competitions_date):
        """
        Function to test the user experience.
        Go to the site index page;
        Click on the link to go to the club points page (user not logged in);
        Return to the index page;
        Try to log in with a wrong email;
        Log in with a correct email;
        Click on the link to go to the club points page (user logged in);
        Return to the showSummary page;
        Click on the link to go to the booking page;
        Book 4 places for the competition;
        Logout.
        """
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))
        driver.maximize_window()
        driver.get("http://127.0.0.1:5000/")
        WebDriverWait(driver, timeout=1).until(EC.title_contains("GUDLFT"))
        assert "GUDLFT" in driver.title
    
>       club_points_link = driver.find_element(By.LINK_TEXT, "See clubs")

tests/functional_tests/test_functional_chrome.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107e1eef0>
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...0001bc49626c _pthread_start + 148\\n15  libsystem_pthread.dylib             0x00000001bc49108c thread_start + 8\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '<anonymous>')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"link text","selector":"See clubs"}
E         (Session info: chrome=100.0.4896.88)
E       Stacktrace:
E       0   chromedriver                        0x00000001031cbc34 chromedriver + 4406324
E       1   chromedriver                        0x0000000103165290 chromedriver + 3986064
E       2   chromedriver                        0x0000000102dc684c chromedriver + 190540
E       3   chromedriver                        0x0000000102df576c chromedriver + 382828
E       4   chromedriver                        0x0000000102e1e6e0 chromedriver + 550624
E       5   chromedriver                        0x0000000102dea864 chromedriver + 338020
E       6   chromedriver                        0x0000000103191320 chromedriver + 4166432
E       7   chromedriver                        0x00000001031a6748 chromedriver + 4253512
E       8   chromedriver                        0x00000001031aacbc chromedriver + 4271292
E       9   chromedriver                        0x00000001031a7004 chromedriver + 4255748
E       10  chromedriver                        0x000000010318708c chromedriver + 4124812
E       11  chromedriver                        0x00000001031bebf8 chromedriver + 4353016
E       12  chromedriver                        0x00000001031bed5c chromedriver + 4353372
E       13  chromedriver                        0x00000001031d2438 chromedriver + 4432952
E       14  libsystem_pthread.dylib             0x00000001bc49626c _pthread_start + 148
E       15  libsystem_pthread.dylib             0x00000001bc49108c thread_start + 8

env/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchElementException
----------------------------- Captured stderr call -----------------------------


====== WebDriver manager ======
Current google-chrome version is 100.0.4896
Get LATEST chromedriver version for 100.0.4896 google-chrome
Driver [/Users/adrien/.wdm/drivers/chromedriver/mac64_m1/100.0.4896.60/chromedriver] found in cache
------------------------------ Captured log call -------------------------------
INFO     WDM:logger.py:27 

INFO     WDM:logger.py:27 ====== WebDriver manager ======
INFO     WDM:logger.py:27 Current google-chrome version is 100.0.4896
INFO     WDM:logger.py:27 Get LATEST chromedriver version for 100.0.4896 google-chrome
INFO     WDM:logger.py:27 Driver [/Users/adrien/.wdm/drivers/chromedriver/mac64_m1/100.0.4896.60/chromedriver] found in cache
_________________________ test_user_experience_firefox _________________________

mock_modified_competitions_date = None

    def test_user_experience_firefox(mock_modified_competitions_date):
        """
        Function to test the user experience.
        Go to the site index page;
        Click on the link to go to the club points page (user not logged in);
        Return to the index page;
        Try to log in with a wrong email;
        Log in with a correct email;
        Click on the link to go to the club points page (user logged in);
        Return to the showSummary page;
        Click on the link to go to the booking page;
        Book 4 places for the competition;
        Logout.
        """
        driver = webdriver.Firefox(service=Service(GeckoDriverManager().install()))
        driver.maximize_window()
        driver.get("http://127.0.0.1:5000/")
        WebDriverWait(driver, timeout=1).until(EC.title_contains("GUDLFT"))
        assert "GUDLFT" in driver.title
    
>       club_points_link = driver.find_element(By.LINK_TEXT, "See clubs")

tests/functional_tests/test_functional_firefox.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:1248: in find_element
    return self.execute(Command.FIND_ELEMENT, {
env/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:425: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107e1c1f0>
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"Unable to locate element: See clubs","stacktr...ntent/shared/webdriver/Errors.jsm:395:5\\nelement.find/</<@chrome://remote/content/marionette/element.js:300:16\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -> None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '<anonymous>')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
>       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: See clubs
E       Stacktrace:
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.jsm:183:5
E       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.jsm:395:5
E       element.find/</<@chrome://remote/content/marionette/element.js:300:16

env/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:247: NoSuchElementException
----------------------------- Captured stderr call -----------------------------


====== WebDriver manager ======
Current firefox version is 99.0
Get LATEST geckodriver version for 99.0 firefox
Driver [/Users/adrien/.wdm/drivers/geckodriver/macos-aarch64/v0.31.0/geckodriver] found in cache
------------------------------ Captured log call -------------------------------
INFO     WDM:logger.py:27 

INFO     WDM:logger.py:27 ====== WebDriver manager ======
INFO     WDM:logger.py:27 Current firefox version is 99.0
INFO     WDM:logger.py:27 Get LATEST geckodriver version for 99.0 firefox
INFO     WDM:logger.py:27 Driver [/Users/adrien/.wdm/drivers/geckodriver/macos-aarch64/v0.31.0/geckodriver] found in cache
=========================== short test summary info ============================
FAILED tests/functional_tests/test_functional_chrome.py::test_user_experience_chrome
FAILED tests/functional_tests/test_functional_firefox.py::test_user_experience_firefox
========================= 2 failed, 5 passed in 6.86s ==========================
